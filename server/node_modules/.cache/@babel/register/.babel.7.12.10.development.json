{
  "{\"sourceRoot\":\"/home/chase/Documents/dev/scheddit/server/db/dev/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/chase/Documents/dev/scheddit/server\",\"filename\":\"/home/chase/Documents/dev/scheddit/server/db/dev/dbConnection.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/chase/Documents/dev/scheddit/server\",\"plugins\":[],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/chase/Documents/dev/scheddit/server/db/dev/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/chase/Documents/dev/scheddit/server",
      "filename": "/home/chase/Documents/dev/scheddit/server/db/dev/dbConnection.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/chase/Documents/dev/scheddit/server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/chase/Documents/dev/scheddit/server/db/dev/dbConnection.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/chase/Documents/dev/scheddit/server/db/dev/dbConnection.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/chase/Documents/dev/scheddit/server/db/dev/",
        "sourceFileName": "dbConnection.js"
      }
    },
    "ast": null,
    "code": "import pool from './pool.js';\npool.on('connect', () => {\n  console.log('Connected to the database!');\n});\n\nconst createUserTable = () => {\n  const userCreateQuery = `CREATE TABLE IF NOT EXISTS users\n     (id SERIAL PRIMARY KEY,\n      user_name VARCHAR(100))`;\n  pool.query(userCreateQuery).then(res => {\n    console.log(res);\n    pool.end();\n  }).catch(err => {\n    console.log(err);\n    pool.end();\n  });\n};\n\nconst dropUserTable = () => {\n  const usersDropQuery = 'DROP TABLE IF EXISTS users';\n  pool.query(usersDropQuery).then(res => {\n    console.log(res);\n    pool.end();\n  }).catch(err => {\n    console.log(err);\n    pool.end();\n  });\n};\n\nconst createAllTables = () => {\n  createUserTable();\n};\n\nconst dropAllTables = () => {\n  dropUserTable();\n};\n\npool.on('remove', () => {\n  console.log('client removed');\n  process.exit(0);\n});\nexport { createAllTables, dropAllTables };\n\nrequire('make-runnable');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRiQ29ubmVjdGlvbi5qcyJdLCJuYW1lcyI6WyJwb29sIiwib24iLCJjb25zb2xlIiwibG9nIiwiY3JlYXRlVXNlclRhYmxlIiwidXNlckNyZWF0ZVF1ZXJ5IiwicXVlcnkiLCJ0aGVuIiwicmVzIiwiZW5kIiwiY2F0Y2giLCJlcnIiLCJkcm9wVXNlclRhYmxlIiwidXNlcnNEcm9wUXVlcnkiLCJjcmVhdGVBbGxUYWJsZXMiLCJkcm9wQWxsVGFibGVzIiwicHJvY2VzcyIsImV4aXQiLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxJQUFQLE1BQWlCLFdBQWpCO0FBRUFBLElBQUksQ0FBQ0MsRUFBTCxDQUFRLFNBQVIsRUFBbUIsTUFBTTtBQUNyQkMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksNEJBQVo7QUFDSCxDQUZEOztBQUtDLE1BQU1DLGVBQWUsR0FBRyxNQUFNO0FBQzFCLFFBQU1DLGVBQWUsR0FBSTtBQUM5QjtBQUNBLDhCQUZLO0FBSUNMLEVBQUFBLElBQUksQ0FBQ00sS0FBTCxDQUFXRCxlQUFYLEVBQ0NFLElBREQsQ0FDTUMsR0FBRyxJQUFJO0FBQ1ROLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxHQUFaO0FBQ0FSLElBQUFBLElBQUksQ0FBQ1MsR0FBTDtBQUNILEdBSkQsRUFLQ0MsS0FMRCxDQUtPQyxHQUFHLElBQUk7QUFDVlQsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlRLEdBQVo7QUFDQVgsSUFBQUEsSUFBSSxDQUFDUyxHQUFMO0FBQ0gsR0FSRDtBQVNKLENBZEQ7O0FBZ0JBLE1BQU1HLGFBQWEsR0FBRyxNQUFNO0FBQ3pCLFFBQU1DLGNBQWMsR0FBRyw0QkFBdkI7QUFDQWIsRUFBQUEsSUFBSSxDQUFDTSxLQUFMLENBQVdPLGNBQVgsRUFDQ04sSUFERCxDQUNNQyxHQUFHLElBQUk7QUFDVE4sSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlLLEdBQVo7QUFDQVIsSUFBQUEsSUFBSSxDQUFDUyxHQUFMO0FBQ0gsR0FKRCxFQUtDQyxLQUxELENBS09DLEdBQUcsSUFBSTtBQUNWVCxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVEsR0FBWjtBQUNBWCxJQUFBQSxJQUFJLENBQUNTLEdBQUw7QUFDSCxHQVJEO0FBU0YsQ0FYRDs7QUFhQSxNQUFNSyxlQUFlLEdBQUcsTUFBTTtBQUMxQlYsRUFBQUEsZUFBZTtBQUNsQixDQUZEOztBQUlBLE1BQU1XLGFBQWEsR0FBRyxNQUFNO0FBQ3hCSCxFQUFBQSxhQUFhO0FBQ2hCLENBRkQ7O0FBSUFaLElBQUksQ0FBQ0MsRUFBTCxDQUFRLFFBQVIsRUFBa0IsTUFBTTtBQUNwQkMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksZ0JBQVo7QUFDQWEsRUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsQ0FBYjtBQUNILENBSEQ7QUFLQSxTQUNJSCxlQURKLEVBRUlDLGFBRko7O0FBS0FHLE9BQU8sQ0FBQyxlQUFELENBQVAiLCJzb3VyY2VSb290IjoiL2hvbWUvY2hhc2UvRG9jdW1lbnRzL2Rldi9zY2hlZGRpdC9zZXJ2ZXIvZGIvZGV2LyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwb29sIGZyb20gJy4vcG9vbC5qcyc7XG5cbnBvb2wub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ0Nvbm5lY3RlZCB0byB0aGUgZGF0YWJhc2UhJyk7XG59KTtcblxuXG4gY29uc3QgY3JlYXRlVXNlclRhYmxlID0gKCkgPT4ge1xuICAgICBjb25zdCB1c2VyQ3JlYXRlUXVlcnkgPSBgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgdXNlcnNcbiAgICAgKGlkIFNFUklBTCBQUklNQVJZIEtFWSxcbiAgICAgIHVzZXJfbmFtZSBWQVJDSEFSKDEwMCkpYDtcblxuICAgICAgcG9vbC5xdWVyeSh1c2VyQ3JlYXRlUXVlcnkpXG4gICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgICAgICAgcG9vbC5lbmQoKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgIHBvb2wuZW5kKCk7XG4gICAgICB9KTtcbiB9O1xuXG4gY29uc3QgZHJvcFVzZXJUYWJsZSA9ICgpID0+IHtcbiAgICBjb25zdCB1c2Vyc0Ryb3BRdWVyeSA9ICdEUk9QIFRBQkxFIElGIEVYSVNUUyB1c2Vycyc7XG4gICAgcG9vbC5xdWVyeSh1c2Vyc0Ryb3BRdWVyeSlcbiAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgICBwb29sLmVuZCgpO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIHBvb2wuZW5kKCk7XG4gICAgfSk7XG4gfTtcblxuIGNvbnN0IGNyZWF0ZUFsbFRhYmxlcyA9ICgpID0+IHtcbiAgICAgY3JlYXRlVXNlclRhYmxlKCk7XG4gfTtcblxuIGNvbnN0IGRyb3BBbGxUYWJsZXMgPSAoKSA9PiB7XG4gICAgIGRyb3BVc2VyVGFibGUoKTtcbiB9O1xuXG4gcG9vbC5vbigncmVtb3ZlJywgKCkgPT4ge1xuICAgICBjb25zb2xlLmxvZygnY2xpZW50IHJlbW92ZWQnKTtcbiAgICAgcHJvY2Vzcy5leGl0KDApO1xuIH0pXG5cbiBleHBvcnQge1xuICAgICBjcmVhdGVBbGxUYWJsZXMsXG4gICAgIGRyb3BBbGxUYWJsZXMsXG4gfTtcblxuIHJlcXVpcmUoJ21ha2UtcnVubmFibGUnKTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "dbConnection.js"
      ],
      "names": [
        "pool",
        "on",
        "console",
        "log",
        "createUserTable",
        "userCreateQuery",
        "query",
        "then",
        "res",
        "end",
        "catch",
        "err",
        "dropUserTable",
        "usersDropQuery",
        "createAllTables",
        "dropAllTables",
        "process",
        "exit",
        "require"
      ],
      "mappings": "AAAA,OAAOA,IAAP,MAAiB,WAAjB;AAEAA,IAAI,CAACC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH,CAFD;;AAKC,MAAMC,eAAe,GAAG,MAAM;AAC1B,QAAMC,eAAe,GAAI;AAC9B;AACA,8BAFK;AAICL,EAAAA,IAAI,CAACM,KAAL,CAAWD,eAAX,EACCE,IADD,CACMC,GAAG,IAAI;AACTN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAR,IAAAA,IAAI,CAACS,GAAL;AACH,GAJD,EAKCC,KALD,CAKOC,GAAG,IAAI;AACVT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACAX,IAAAA,IAAI,CAACS,GAAL;AACH,GARD;AASJ,CAdD;;AAgBA,MAAMG,aAAa,GAAG,MAAM;AACzB,QAAMC,cAAc,GAAG,4BAAvB;AACAb,EAAAA,IAAI,CAACM,KAAL,CAAWO,cAAX,EACCN,IADD,CACMC,GAAG,IAAI;AACTN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAR,IAAAA,IAAI,CAACS,GAAL;AACH,GAJD,EAKCC,KALD,CAKOC,GAAG,IAAI;AACVT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACAX,IAAAA,IAAI,CAACS,GAAL;AACH,GARD;AASF,CAXD;;AAaA,MAAMK,eAAe,GAAG,MAAM;AAC1BV,EAAAA,eAAe;AAClB,CAFD;;AAIA,MAAMW,aAAa,GAAG,MAAM;AACxBH,EAAAA,aAAa;AAChB,CAFD;;AAIAZ,IAAI,CAACC,EAAL,CAAQ,QAAR,EAAkB,MAAM;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAa,EAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH,CAHD;AAKA,SACIH,eADJ,EAEIC,aAFJ;;AAKAG,OAAO,CAAC,eAAD,CAAP",
      "sourceRoot": "/home/chase/Documents/dev/scheddit/server/db/dev/",
      "sourcesContent": [
        "import pool from './pool.js';\n\npool.on('connect', () => {\n    console.log('Connected to the database!');\n});\n\n\n const createUserTable = () => {\n     const userCreateQuery = `CREATE TABLE IF NOT EXISTS users\n     (id SERIAL PRIMARY KEY,\n      user_name VARCHAR(100))`;\n\n      pool.query(userCreateQuery)\n      .then(res => {\n          console.log(res);\n          pool.end();\n      })\n      .catch(err => {\n          console.log(err);\n          pool.end();\n      });\n };\n\n const dropUserTable = () => {\n    const usersDropQuery = 'DROP TABLE IF EXISTS users';\n    pool.query(usersDropQuery)\n    .then(res => {\n        console.log(res);\n        pool.end();\n    })\n    .catch(err => {\n        console.log(err);\n        pool.end();\n    });\n };\n\n const createAllTables = () => {\n     createUserTable();\n };\n\n const dropAllTables = () => {\n     dropUserTable();\n };\n\n pool.on('remove', () => {\n     console.log('client removed');\n     process.exit(0);\n })\n\n export {\n     createAllTables,\n     dropAllTables,\n };\n\n require('make-runnable');"
      ]
    },
    "sourceType": "module",
    "mtime": 1611608022645
  },
  "{\"sourceRoot\":\"/home/chase/Documents/dev/scheddit/server/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/chase/Documents/dev/scheddit/server\",\"filename\":\"/home/chase/Documents/dev/scheddit/server/index.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/chase/Documents/dev/scheddit/server\",\"plugins\":[],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/chase/Documents/dev/scheddit/server/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/chase/Documents/dev/scheddit/server",
      "filename": "/home/chase/Documents/dev/scheddit/server/index.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/chase/Documents/dev/scheddit/server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/chase/Documents/dev/scheddit/server/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/chase/Documents/dev/scheddit/server/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/chase/Documents/dev/scheddit/server/",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "const path = require('path');\n\nconst dotenv = require('dotenv').config();\n\nconst express = require('express');\n\nconst session = require('express-session');\n\nconst app = express();\n\nconst cors = require('cors');\n\nconst FOUR_HOURS = 1000 * 60 * 60 * 4; //TODO: Change routing from back-end to front end\n//Create a more organized routing structure\n//Install cors to allow api calls\n\nconst {\n  SERVER_PORT = 8081,\n  CLIENT_PORT = 3000,\n  NODE_ENV = 'development',\n  SESS_LIFETIME = FOUR_HOURS,\n  SESS_NAME = 'sid',\n  SESS_SECRET = 'somesupersecretstring'\n} = process.env;\nconst IN_PROD = NODE_ENV === 'production';\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n})); //Create session object with cookie\n\napp.use(session({\n  name: SESS_NAME,\n  resave: false,\n  saveUninitialized: false,\n  secret: SESS_SECRET,\n  cookie: {\n    maxAge: SESS_LIFETIME,\n    sameSite: true,\n    secure: IN_PROD\n  }\n})); //SETUP CORS\n\napp.use(cors({\n  origin: \"http://localhost:3000\",\n  methods: \"GET,HEAD,PUT,PATCH,POST,DELETE\",\n  credentials: true\n})); //ROUTES\n\napp.use('/auth', require('./routes/auth_routes')); //Get welcome page with login\n//Instantiate token\n\nconst authCheck = (req, res, next) => {\n  if (!req.session.token) {\n    res.status(401).json({\n      authenticated: false,\n      message: \"User has not been authenticated.\"\n    });\n  } else {\n    next();\n  }\n};\n\napp.get('/', authCheck, (req, res) => {\n  res.status(200).json({\n    authenticated: true,\n    message: \"User successfully authenticated.\",\n    user: req.session.token,\n    cookies: req.cookies\n  });\n});\napp.listen(SERVER_PORT, () => {\n  console.log(`Server listening on port ${SERVER_PORT}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiZG90ZW52IiwiY29uZmlnIiwiZXhwcmVzcyIsInNlc3Npb24iLCJhcHAiLCJjb3JzIiwiRk9VUl9IT1VSUyIsIlNFUlZFUl9QT1JUIiwiQ0xJRU5UX1BPUlQiLCJOT0RFX0VOViIsIlNFU1NfTElGRVRJTUUiLCJTRVNTX05BTUUiLCJTRVNTX1NFQ1JFVCIsInByb2Nlc3MiLCJlbnYiLCJJTl9QUk9EIiwidXNlIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsIm5hbWUiLCJyZXNhdmUiLCJzYXZlVW5pbml0aWFsaXplZCIsInNlY3JldCIsImNvb2tpZSIsIm1heEFnZSIsInNhbWVTaXRlIiwic2VjdXJlIiwib3JpZ2luIiwibWV0aG9kcyIsImNyZWRlbnRpYWxzIiwiYXV0aENoZWNrIiwicmVxIiwicmVzIiwibmV4dCIsInRva2VuIiwic3RhdHVzIiwiYXV0aGVudGljYXRlZCIsIm1lc3NhZ2UiLCJnZXQiLCJ1c2VyIiwiY29va2llcyIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCRSxNQUFsQixFQUFmOztBQUNBLE1BQU1DLE9BQU8sR0FBR0gsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBQ0EsTUFBTUksT0FBTyxHQUFJSixPQUFPLENBQUMsaUJBQUQsQ0FBeEI7O0FBQ0EsTUFBTUssR0FBRyxHQUFHRixPQUFPLEVBQW5COztBQUNBLE1BQU1HLElBQUksR0FBR04sT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBRUEsTUFBTU8sVUFBVSxHQUFHLE9BQU8sRUFBUCxHQUFZLEVBQVosR0FBaUIsQ0FBcEMsQyxDQUVBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNO0FBQ0pDLEVBQUFBLFdBQVcsR0FBRyxJQURWO0FBRUpDLEVBQUFBLFdBQVcsR0FBRyxJQUZWO0FBR0pDLEVBQUFBLFFBQVEsR0FBRyxhQUhQO0FBSUpDLEVBQUFBLGFBQWEsR0FBR0osVUFKWjtBQUtKSyxFQUFBQSxTQUFTLEdBQUcsS0FMUjtBQU1KQyxFQUFBQSxXQUFXLEdBQUc7QUFOVixJQU9GQyxPQUFPLENBQUNDLEdBUFo7QUFTQSxNQUFNQyxPQUFPLEdBQUdOLFFBQVEsS0FBSyxZQUE3QjtBQUVBTCxHQUFHLENBQUNZLEdBQUosQ0FBUWQsT0FBTyxDQUFDZSxJQUFSLEVBQVI7QUFDQWIsR0FBRyxDQUFDWSxHQUFKLENBQVFkLE9BQU8sQ0FBQ2dCLFVBQVIsQ0FBbUI7QUFBRUMsRUFBQUEsUUFBUSxFQUFFO0FBQVosQ0FBbkIsQ0FBUixFLENBRUE7O0FBQ0FmLEdBQUcsQ0FBQ1ksR0FBSixDQUFRYixPQUFPLENBQUM7QUFDZGlCLEVBQUFBLElBQUksRUFBRVQsU0FEUTtBQUVkVSxFQUFBQSxNQUFNLEVBQUUsS0FGTTtBQUdkQyxFQUFBQSxpQkFBaUIsRUFBRSxLQUhMO0FBSWRDLEVBQUFBLE1BQU0sRUFBRVgsV0FKTTtBQUtkWSxFQUFBQSxNQUFNLEVBQUU7QUFDTkMsSUFBQUEsTUFBTSxFQUFFZixhQURGO0FBRU5nQixJQUFBQSxRQUFRLEVBQUUsSUFGSjtBQUdOQyxJQUFBQSxNQUFNLEVBQUVaO0FBSEY7QUFMTSxDQUFELENBQWYsRSxDQVlBOztBQUNBWCxHQUFHLENBQUNZLEdBQUosQ0FBUVgsSUFBSSxDQUFDO0FBQ1h1QixFQUFBQSxNQUFNLEVBQUUsdUJBREc7QUFFWEMsRUFBQUEsT0FBTyxFQUFFLGdDQUZFO0FBR1hDLEVBQUFBLFdBQVcsRUFBRTtBQUhGLENBQUQsQ0FBWixFLENBTUE7O0FBQ0ExQixHQUFHLENBQUNZLEdBQUosQ0FBUSxPQUFSLEVBQWlCakIsT0FBTyxDQUFDLHNCQUFELENBQXhCLEUsQ0FHQTtBQUNBOztBQUVBLE1BQU1nQyxTQUFTLEdBQUcsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLElBQVgsS0FBb0I7QUFDcEMsTUFBSSxDQUFDRixHQUFHLENBQUM3QixPQUFKLENBQVlnQyxLQUFqQixFQUF3QjtBQUN0QkYsSUFBQUEsR0FBRyxDQUFDRyxNQUFKLENBQVcsR0FBWCxFQUFnQm5CLElBQWhCLENBQXFCO0FBQ25Cb0IsTUFBQUEsYUFBYSxFQUFFLEtBREk7QUFFbkJDLE1BQUFBLE9BQU8sRUFBRTtBQUZVLEtBQXJCO0FBSUQsR0FMRCxNQUtPO0FBQ0xKLElBQUFBLElBQUk7QUFDTDtBQUNGLENBVEQ7O0FBV0E5QixHQUFHLENBQUNtQyxHQUFKLENBQVEsR0FBUixFQUFhUixTQUFiLEVBQXdCLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ3BDQSxFQUFBQSxHQUFHLENBQUNHLE1BQUosQ0FBVyxHQUFYLEVBQWdCbkIsSUFBaEIsQ0FBcUI7QUFDbkJvQixJQUFBQSxhQUFhLEVBQUUsSUFESTtBQUVuQkMsSUFBQUEsT0FBTyxFQUFFLGtDQUZVO0FBR25CRSxJQUFBQSxJQUFJLEVBQUVSLEdBQUcsQ0FBQzdCLE9BQUosQ0FBWWdDLEtBSEM7QUFJbkJNLElBQUFBLE9BQU8sRUFBRVQsR0FBRyxDQUFDUztBQUpNLEdBQXJCO0FBTUQsQ0FQRDtBQVNBckMsR0FBRyxDQUFDc0MsTUFBSixDQUFXbkMsV0FBWCxFQUF3QixNQUFNO0FBQzVCb0MsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsNEJBQTJCckMsV0FBWSxFQUFwRDtBQUNELENBRkQiLCJzb3VyY2VSb290IjoiL2hvbWUvY2hhc2UvRG9jdW1lbnRzL2Rldi9zY2hlZGRpdC9zZXJ2ZXIvIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGRvdGVudiA9IHJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpO1xuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IHNlc3Npb24gPSAgcmVxdWlyZSgnZXhwcmVzcy1zZXNzaW9uJylcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmNvbnN0IGNvcnMgPSByZXF1aXJlKCdjb3JzJyk7XG5cbmNvbnN0IEZPVVJfSE9VUlMgPSAxMDAwICogNjAgKiA2MCAqIDQ7XG5cbi8vVE9ETzogQ2hhbmdlIHJvdXRpbmcgZnJvbSBiYWNrLWVuZCB0byBmcm9udCBlbmRcbi8vQ3JlYXRlIGEgbW9yZSBvcmdhbml6ZWQgcm91dGluZyBzdHJ1Y3R1cmVcbi8vSW5zdGFsbCBjb3JzIHRvIGFsbG93IGFwaSBjYWxsc1xuXG5jb25zdCB7XG4gIFNFUlZFUl9QT1JUID0gODA4MSxcbiAgQ0xJRU5UX1BPUlQgPSAzMDAwLFxuICBOT0RFX0VOViA9ICdkZXZlbG9wbWVudCcsXG4gIFNFU1NfTElGRVRJTUUgPSBGT1VSX0hPVVJTLFxuICBTRVNTX05BTUUgPSAnc2lkJyxcbiAgU0VTU19TRUNSRVQgPSAnc29tZXN1cGVyc2VjcmV0c3RyaW5nJ1xufSA9IHByb2Nlc3MuZW52O1xuXG5jb25zdCBJTl9QUk9EID0gTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJ1xuXG5hcHAudXNlKGV4cHJlc3MuanNvbigpKVxuYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSlcblxuLy9DcmVhdGUgc2Vzc2lvbiBvYmplY3Qgd2l0aCBjb29raWVcbmFwcC51c2Uoc2Vzc2lvbih7XG4gIG5hbWU6IFNFU1NfTkFNRSxcbiAgcmVzYXZlOiBmYWxzZSxcbiAgc2F2ZVVuaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICBzZWNyZXQ6IFNFU1NfU0VDUkVULFxuICBjb29raWU6IHtcbiAgICBtYXhBZ2U6IFNFU1NfTElGRVRJTUUsXG4gICAgc2FtZVNpdGU6IHRydWUsXG4gICAgc2VjdXJlOiBJTl9QUk9EXG4gIH1cbn0pKVxuXG4vL1NFVFVQIENPUlNcbmFwcC51c2UoY29ycyh7XG4gIG9yaWdpbjogXCJodHRwOi8vbG9jYWxob3N0OjMwMDBcIixcbiAgbWV0aG9kczogXCJHRVQsSEVBRCxQVVQsUEFUQ0gsUE9TVCxERUxFVEVcIixcbiAgY3JlZGVudGlhbHM6IHRydWVcbn0pKVxuXG4vL1JPVVRFU1xuYXBwLnVzZSgnL2F1dGgnLCByZXF1aXJlKCcuL3JvdXRlcy9hdXRoX3JvdXRlcycpKVxuXG5cbi8vR2V0IHdlbGNvbWUgcGFnZSB3aXRoIGxvZ2luXG4vL0luc3RhbnRpYXRlIHRva2VuXG5cbmNvbnN0IGF1dGhDaGVjayA9IChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICBpZiAoIXJlcS5zZXNzaW9uLnRva2VuKSB7XG4gICAgcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgYXV0aGVudGljYXRlZDogZmFsc2UsXG4gICAgICBtZXNzYWdlOiBcIlVzZXIgaGFzIG5vdCBiZWVuIGF1dGhlbnRpY2F0ZWQuXCJcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBuZXh0KCk7XG4gIH1cbn1cblxuYXBwLmdldCgnLycsIGF1dGhDaGVjaywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICBhdXRoZW50aWNhdGVkOiB0cnVlLFxuICAgIG1lc3NhZ2U6IFwiVXNlciBzdWNjZXNzZnVsbHkgYXV0aGVudGljYXRlZC5cIixcbiAgICB1c2VyOiByZXEuc2Vzc2lvbi50b2tlbixcbiAgICBjb29raWVzOiByZXEuY29va2llc1xuICB9KVxufSlcblxuYXBwLmxpc3RlbihTRVJWRVJfUE9SVCwgKCkgPT4ge1xuICBjb25zb2xlLmxvZyhgU2VydmVyIGxpc3RlbmluZyBvbiBwb3J0ICR7U0VSVkVSX1BPUlR9YCk7XG59KTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "path",
        "require",
        "dotenv",
        "config",
        "express",
        "session",
        "app",
        "cors",
        "FOUR_HOURS",
        "SERVER_PORT",
        "CLIENT_PORT",
        "NODE_ENV",
        "SESS_LIFETIME",
        "SESS_NAME",
        "SESS_SECRET",
        "process",
        "env",
        "IN_PROD",
        "use",
        "json",
        "urlencoded",
        "extended",
        "name",
        "resave",
        "saveUninitialized",
        "secret",
        "cookie",
        "maxAge",
        "sameSite",
        "secure",
        "origin",
        "methods",
        "credentials",
        "authCheck",
        "req",
        "res",
        "next",
        "token",
        "status",
        "authenticated",
        "message",
        "get",
        "user",
        "cookies",
        "listen",
        "console",
        "log"
      ],
      "mappings": "AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBE,MAAlB,EAAf;;AACA,MAAMC,OAAO,GAAGH,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMI,OAAO,GAAIJ,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMK,GAAG,GAAGF,OAAO,EAAnB;;AACA,MAAMG,IAAI,GAAGN,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMO,UAAU,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,CAApC,C,CAEA;AACA;AACA;;AAEA,MAAM;AACJC,EAAAA,WAAW,GAAG,IADV;AAEJC,EAAAA,WAAW,GAAG,IAFV;AAGJC,EAAAA,QAAQ,GAAG,aAHP;AAIJC,EAAAA,aAAa,GAAGJ,UAJZ;AAKJK,EAAAA,SAAS,GAAG,KALR;AAMJC,EAAAA,WAAW,GAAG;AANV,IAOFC,OAAO,CAACC,GAPZ;AASA,MAAMC,OAAO,GAAGN,QAAQ,KAAK,YAA7B;AAEAL,GAAG,CAACY,GAAJ,CAAQd,OAAO,CAACe,IAAR,EAAR;AACAb,GAAG,CAACY,GAAJ,CAAQd,OAAO,CAACgB,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR,E,CAEA;;AACAf,GAAG,CAACY,GAAJ,CAAQb,OAAO,CAAC;AACdiB,EAAAA,IAAI,EAAET,SADQ;AAEdU,EAAAA,MAAM,EAAE,KAFM;AAGdC,EAAAA,iBAAiB,EAAE,KAHL;AAIdC,EAAAA,MAAM,EAAEX,WAJM;AAKdY,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAEf,aADF;AAENgB,IAAAA,QAAQ,EAAE,IAFJ;AAGNC,IAAAA,MAAM,EAAEZ;AAHF;AALM,CAAD,CAAf,E,CAYA;;AACAX,GAAG,CAACY,GAAJ,CAAQX,IAAI,CAAC;AACXuB,EAAAA,MAAM,EAAE,uBADG;AAEXC,EAAAA,OAAO,EAAE,gCAFE;AAGXC,EAAAA,WAAW,EAAE;AAHF,CAAD,CAAZ,E,CAMA;;AACA1B,GAAG,CAACY,GAAJ,CAAQ,OAAR,EAAiBjB,OAAO,CAAC,sBAAD,CAAxB,E,CAGA;AACA;;AAEA,MAAMgC,SAAS,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACpC,MAAI,CAACF,GAAG,CAAC7B,OAAJ,CAAYgC,KAAjB,EAAwB;AACtBF,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AACnBoB,MAAAA,aAAa,EAAE,KADI;AAEnBC,MAAAA,OAAO,EAAE;AAFU,KAArB;AAID,GALD,MAKO;AACLJ,IAAAA,IAAI;AACL;AACF,CATD;;AAWA9B,GAAG,CAACmC,GAAJ,CAAQ,GAAR,EAAaR,SAAb,EAAwB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpCA,EAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AACnBoB,IAAAA,aAAa,EAAE,IADI;AAEnBC,IAAAA,OAAO,EAAE,kCAFU;AAGnBE,IAAAA,IAAI,EAAER,GAAG,CAAC7B,OAAJ,CAAYgC,KAHC;AAInBM,IAAAA,OAAO,EAAET,GAAG,CAACS;AAJM,GAArB;AAMD,CAPD;AASArC,GAAG,CAACsC,MAAJ,CAAWnC,WAAX,EAAwB,MAAM;AAC5BoC,EAAAA,OAAO,CAACC,GAAR,CAAa,4BAA2BrC,WAAY,EAApD;AACD,CAFD",
      "sourceRoot": "/home/chase/Documents/dev/scheddit/server/",
      "sourcesContent": [
        "const path = require('path');\nconst dotenv = require('dotenv').config();\nconst express = require('express');\nconst session =  require('express-session')\nconst app = express();\nconst cors = require('cors');\n\nconst FOUR_HOURS = 1000 * 60 * 60 * 4;\n\n//TODO: Change routing from back-end to front end\n//Create a more organized routing structure\n//Install cors to allow api calls\n\nconst {\n  SERVER_PORT = 8081,\n  CLIENT_PORT = 3000,\n  NODE_ENV = 'development',\n  SESS_LIFETIME = FOUR_HOURS,\n  SESS_NAME = 'sid',\n  SESS_SECRET = 'somesupersecretstring'\n} = process.env;\n\nconst IN_PROD = NODE_ENV === 'production'\n\napp.use(express.json())\napp.use(express.urlencoded({ extended: true }))\n\n//Create session object with cookie\napp.use(session({\n  name: SESS_NAME,\n  resave: false,\n  saveUninitialized: false,\n  secret: SESS_SECRET,\n  cookie: {\n    maxAge: SESS_LIFETIME,\n    sameSite: true,\n    secure: IN_PROD\n  }\n}))\n\n//SETUP CORS\napp.use(cors({\n  origin: \"http://localhost:3000\",\n  methods: \"GET,HEAD,PUT,PATCH,POST,DELETE\",\n  credentials: true\n}))\n\n//ROUTES\napp.use('/auth', require('./routes/auth_routes'))\n\n\n//Get welcome page with login\n//Instantiate token\n\nconst authCheck = (req, res, next) => {\n  if (!req.session.token) {\n    res.status(401).json({\n      authenticated: false,\n      message: \"User has not been authenticated.\"\n    });\n  } else {\n    next();\n  }\n}\n\napp.get('/', authCheck, (req, res) => {\n  res.status(200).json({\n    authenticated: true,\n    message: \"User successfully authenticated.\",\n    user: req.session.token,\n    cookies: req.cookies\n  })\n})\n\napp.listen(SERVER_PORT, () => {\n  console.log(`Server listening on port ${SERVER_PORT}`);\n});"
      ]
    },
    "sourceType": "module",
    "mtime": 1610745915953
  },
  "{\"sourceRoot\":\"/home/chase/Documents/dev/scheddit/server/routes/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/chase/Documents/dev/scheddit/server\",\"filename\":\"/home/chase/Documents/dev/scheddit/server/routes/auth_routes.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/chase/Documents/dev/scheddit/server\",\"plugins\":[],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/chase/Documents/dev/scheddit/server/routes/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/chase/Documents/dev/scheddit/server",
      "filename": "/home/chase/Documents/dev/scheddit/server/routes/auth_routes.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/chase/Documents/dev/scheddit/server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/chase/Documents/dev/scheddit/server/routes/auth_routes.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/chase/Documents/dev/scheddit/server/routes/auth_routes.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/chase/Documents/dev/scheddit/server/routes/",
        "sourceFileName": "auth_routes.js"
      }
    },
    "ast": null,
    "code": "const dotenv = require('../../client/node_modules/dotenv').config();\n\nconst router = require('express').Router();\n\nconst snoowrap = require('snoowrap');\n\nconst CLIENT_HOME_PAGE_URL = \"http://localhost:3000\";\nlet user = '';\nconst {\n  CLIENT_ID,\n  CLIENT_SECRET,\n  REDDIT_USER,\n  REDDIT_PASSWORD\n} = process.env;\nrouter.get('/login/success', (req, res) => {\n  console.log(req.session);\n\n  if (req.session.token) {\n    res.json({\n      success: true,\n      message: \"User has successfully authenticated\",\n      user: req.session.token,\n      cookies: req.session.token\n    });\n  }\n});\nrouter.get('/login/failed', (req, res) => {\n  res.status(401).json({\n    success: false,\n    message: \"User failed to authenticate.\"\n  });\n}); //Authorize with access token\n\nrouter.get('/reddit/callback', (req, res, next) => {\n  const requestToken = req.query.code;\n  let user;\n  snoowrap.fromAuthCode({\n    code: requestToken,\n    userAgent: 'scheddit',\n    clientId: CLIENT_ID,\n    clientSecret: CLIENT_SECRET,\n    redirectUri: 'http://localhost:8081/auth/reddit/callback'\n  }).then(response => {\n    const accessToken = response.access_token;\n    req.session.token = accessToken;\n    console.log(req.session.token); //CURRENT PROBLEMS:\n    //Trouble saving username to be grabbed by client at ../login/success\n\n    response.getMe().then(a => {\n      user = a.name;\n    }); //TODO: create new user with sessionId : accessToken link\n    //TODO: Construct snoowrap object with accessToken to do things on behalf of user\n  });\n  res.redirect(CLIENT_HOME_PAGE_URL);\n}); //GENERATE AUTH URL\n\nrouter.get('/reddit', (req, res) => {\n  //Creates URL where users can authenticate via reddit\n  //If user chooses \"Allow\" then they are redirected to redirectUri\n  let authenticationUrl = snoowrap.getAuthUrl({\n    clientId: CLIENT_ID,\n    scope: ['identity', 'submit', 'read', 'vote'],\n    permanent: true,\n    redirectUri: 'http://localhost:8081/auth/reddit/callback',\n    state: 'teststring'\n  });\n  res.redirect(authenticationUrl);\n});\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGhfcm91dGVzLmpzIl0sIm5hbWVzIjpbImRvdGVudiIsInJlcXVpcmUiLCJjb25maWciLCJyb3V0ZXIiLCJSb3V0ZXIiLCJzbm9vd3JhcCIsIkNMSUVOVF9IT01FX1BBR0VfVVJMIiwidXNlciIsIkNMSUVOVF9JRCIsIkNMSUVOVF9TRUNSRVQiLCJSRURESVRfVVNFUiIsIlJFRERJVF9QQVNTV09SRCIsInByb2Nlc3MiLCJlbnYiLCJnZXQiLCJyZXEiLCJyZXMiLCJjb25zb2xlIiwibG9nIiwic2Vzc2lvbiIsInRva2VuIiwianNvbiIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwiY29va2llcyIsInN0YXR1cyIsIm5leHQiLCJyZXF1ZXN0VG9rZW4iLCJxdWVyeSIsImNvZGUiLCJmcm9tQXV0aENvZGUiLCJ1c2VyQWdlbnQiLCJjbGllbnRJZCIsImNsaWVudFNlY3JldCIsInJlZGlyZWN0VXJpIiwidGhlbiIsInJlc3BvbnNlIiwiYWNjZXNzVG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJnZXRNZSIsImEiLCJuYW1lIiwicmVkaXJlY3QiLCJhdXRoZW50aWNhdGlvblVybCIsImdldEF1dGhVcmwiLCJzY29wZSIsInBlcm1hbmVudCIsInN0YXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsa0NBQUQsQ0FBUCxDQUE0Q0MsTUFBNUMsRUFBZjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdGLE9BQU8sQ0FBQyxTQUFELENBQVAsQ0FBbUJHLE1BQW5CLEVBQWY7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHSixPQUFPLENBQUMsVUFBRCxDQUF4Qjs7QUFDQSxNQUFNSyxvQkFBb0IsR0FBRyx1QkFBN0I7QUFFQSxJQUFJQyxJQUFJLEdBQUcsRUFBWDtBQUVBLE1BQU07QUFDSkMsRUFBQUEsU0FESTtBQUVKQyxFQUFBQSxhQUZJO0FBR0pDLEVBQUFBLFdBSEk7QUFJSkMsRUFBQUE7QUFKSSxJQUtGQyxPQUFPLENB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ZXIvcm91dGVzLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRvdGVudiA9IHJlcXVpcmUoJy4uLy4uL2NsaWVudC9ub2RlX21vZHVsZXMvZG90ZW52JykuY29uZmlnKCk7XG5jb25zdCByb3V0ZXIgPSByZXF1aXJlKCdleHByZXNzJykuUm91dGVyKCk7XG5jb25zdCBzbm9vd3JhcCA9IHJlcXVpcmUoJ3Nub293cmFwJyk7XG5jb25zdCBDTElFTlRfSE9NRV9QQUdFX1VSTCA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwXCI7XG5cbmxldCB1c2VyID0gJyc7XG5cbmNvbnN0IHtcbiAgQ0xJRU5UX0lELFxuICBDTElFTlRfU0VDUkVULFxuICBSRURESVRfVVNFUixcbiAgUkVERElUX1BBU1NXT1JEXG59ID0gcHJvY2Vzcy5lbnY7XG5cbnJvdXRlci5nZXQoJy9sb2dpbi9zdWNjZXNzJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgY29uc29sZS5sb2cocmVxLnNlc3Npb24pO1xuXG4gICAgaWYgKHJlcS5zZXNzaW9uLnRva2VuKSB7XG4gICAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBcIlVzZXIgaGFzIHN1Y2Nlc3NmdWxseSBhdXRoZW50aWNhdGVkXCIsXG4gICAgICAgICAgICB1c2VyOiByZXEuc2Vzc2lvbi50b2tlbixcbiAgICAgICAgICAgIGNvb2tpZXM6IHJlcS5zZXNzaW9uLnRva2VuXG4gICAgICAgIH0pO1xuXG4gICAgfVxufSk7XG5cbnJvdXRlci5nZXQoJy9sb2dpbi9mYWlsZWQnLCAocmVxLCByZXMpID0+IHtcbiAgICByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlOiBcIlVzZXIgZmFpbGVkIHRvIGF1dGhlbnRpY2F0ZS5cIlxuICAgIH0pO1xufSk7XG5cblxuLy9BdXRob3JpemUgd2l0aCBhY2Nlc3MgdG9rZW5cbnJvdXRlci5nZXQoJy9yZWRkaXQvY2FsbGJhY2snLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0VG9rZW4gPSByZXEucXVlcnkuY29kZTtcbiAgICBsZXQgdXNlcjtcbiAgICBcbiAgICBzbm9vd3JhcC5mcm9tQXV0aENvZGUoe1xuICAgICAgY29kZTogcmVxdWVzdFRva2VuLFxuICAgICAgdXNlckFnZW50OiAnc2NoZWRkaXQnLFxuICAgICAgY2xpZW50SWQ6IENMSUVOVF9JRCxcbiAgICAgIGNsaWVudFNlY3JldDogQ0xJRU5UX1NFQ1JFVCxcbiAgICAgIHJlZGlyZWN0VXJpOiAnaHR0cDovL2xvY2FsaG9zdDo4MDgxL2F1dGgvcmVkZGl0L2NhbGxiYWNrJ1xuICAgIH0pLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgY29uc3QgYWNjZXNzVG9rZW4gPSByZXNwb25zZS5hY2Nlc3NfdG9rZW5cbiAgICAgIHJlcS5zZXNzaW9uLnRva2VuID0gYWNjZXNzVG9rZW47XG4gICAgICBjb25zb2xlLmxvZyhyZXEuc2Vzc2lvbi50b2tlbik7XG5cbiAgICAgIC8vQ1VSUkVOVCBQUk9CTEVNUzpcbiAgICAgIC8vVHJvdWJsZSBzYXZpbmcgdXNlcm5hbWUgdG8gYmUgZ3JhYmJlZCBieSBjbGllbnQgYXQgLi4vbG9naW4vc3VjY2Vzc1xuICAgICAgcmVzcG9uc2UuZ2V0TWUoKS50aGVuKGEgPT4ge1xuICAgICAgICB1c2VyID0gYS5uYW1lO1xuICAgICAgfSk7XG4gICAgICAvL1RPRE86IGNyZWF0ZSBuZXcgdXNlciB3aXRoIHNlc3Npb25JZCA6IGFjY2Vzc1Rva2VuIGxpbmtcbiAgICAgIC8vVE9ETzogQ29uc3RydWN0IHNub293cmFwIG9iamVjdCB3aXRoIGFjY2Vzc1Rva2VuIHRvIGRvIHRoaW5ncyBvbiBiZWhhbGYgb2YgdXNlclxuICAgIH0pXG4gICAgcmVzLnJlZGlyZWN0KENMSUVOVF9IT01FX1BBR0VfVVJMKTtcblxuICB9KTtcblxuICAvL0dFTkVSQVRFIEFVVEggVVJMXG5yb3V0ZXIuZ2V0KCcvcmVkZGl0JywgKHJlcSwgcmVzKSA9PiB7XG4gICAgLy9DcmVhdGVzIFVSTCB3aGVyZSB1c2VycyBjYW4gYXV0aGVudGljYXRlIHZpYSByZWRkaXRcbiAgICAvL0lmIHVzZXIgY2hvb3NlcyBcIkFsbG93XCIgdGhlbiB0aGV5IGFyZSByZWRpcmVjdGVkIHRvIHJlZGlyZWN0VXJpXG4gICAgbGV0IGF1dGhlbnRpY2F0aW9uVXJsID0gc25vb3dyYXAuZ2V0QXV0aFVybCh7XG4gICAgICBjbGllbnRJZDogQ0xJRU5UX0lELFxuICAgICAgc2NvcGU6IFsnaWRlbnRpdHknLCAnc3VibWl0JywgJ3JlYWQnLCAndm90ZSddLFxuICAgICAgcGVybWFuZW50OiB0cnVlLFxuICAgICAgcmVkaXJlY3RVcmk6ICdodHRwOi8vbG9jYWxob3N0OjgwODEvYXV0aC9yZWRkaXQvY2FsbGJhY2snLFxuICAgICAgc3RhdGU6ICd0ZXN0c3RyaW5nJ1xuICAgIH0pXG5cbiAgICByZXMucmVkaXJlY3QoYXV0aGVudGljYXRpb25VcmwpO1xuICB9KVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcjtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "auth_routes.js"
      ],
      "names": [
        "dotenv",
        "require",
        "config",
        "router",
        "Router",
        "snoowrap",
        "CLIENT_HOME_PAGE_URL",
        "user",
        "CLIENT_ID",
        "CLIENT_SECRET",
        "REDDIT_USER",
        "REDDIT_PASSWORD",
        "process",
        "env",
        "get",
        "req",
        "res",
        "console",
        "log",
        "session",
        "token",
        "json",
        "success",
        "message",
        "cookies",
        "status",
        "next",
        "requestToken",
        "query",
        "code",
        "fromAuthCode",
        "userAgent",
        "clientId",
        "clientSecret",
        "redirectUri",
        "then",
        "response",
        "accessToken",
        "access_token",
        "getMe",
        "a",
        "name",
        "redirect",
        "authenticationUrl",
        "getAuthUrl",
        "scope",
        "permanent",
        "state",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/home/chase/Documents/dev/scheddit/server/routes/",
      "sourcesContent": [
        "const dotenv = require('../../client/node_modules/dotenv').config();\nconst router = require('express').Router();\nconst snoowrap = require('snoowrap');\nconst CLIENT_HOME_PAGE_URL = \"http://localhost:3000\";\n\nlet user = '';\n\nconst {\n  CLIENT_ID,\n  CLIENT_SECRET,\n  REDDIT_USER,\n  REDDIT_PASSWORD\n} = process.env;\n\nrouter.get('/login/success', (req, res) => {\n    console.log(req.session);\n\n    if (req.session.token) {\n        res.json({\n            success: true,\n            message: \"User has successfully authenticated\",\n            user: req.session.token,\n            cookies: req.session.token\n        });\n\n    }\n});\n\nrouter.get('/login/failed', (req, res) => {\n    res.status(401).json({\n        success: false,\n        message: \"User failed to authenticate.\"\n    });\n});\n\n\n//Authorize with access token\nrouter.get('/reddit/callback', (req, res, next) => {\n    const requestToken = req.query.code;\n    let user;\n    \n    snoowrap.fromAuthCode({\n      code: requestToken,\n      userAgent: 'scheddit',\n      clientId: CLIENT_ID,\n      clientSecret: CLIENT_SECRET,\n      redirectUri: 'http://localhost:8081/auth/reddit/callback'\n    }).then(response => {\n      const accessToken = response.access_token\n      req.session.token = accessToken;\n      console.log(req.session.token);\n\n      //CURRENT PROBLEMS:\n      //Trouble saving username to be grabbed by client at ../login/success\n      response.getMe().then(a => {\n        user = a.name;\n      });\n      //TODO: create new user with sessionId : accessToken link\n      //TODO: Construct snoowrap object with accessToken to do things on behalf of user\n    })\n    res.redirect(CLIENT_HOME_PAGE_URL);\n\n  });\n\n  //GENERATE AUTH URL\nrouter.get('/reddit', (req, res) => {\n    //Creates URL where users can authenticate via reddit\n    //If user chooses \"Allow\" then they are redirected to redirectUri\n    let authenticationUrl = snoowrap.getAuthUrl({\n      clientId: CLIENT_ID,\n      scope: ['identity', 'submit', 'read', 'vote'],\n      permanent: true,\n      redirectUri: 'http://localhost:8081/auth/reddit/callback',\n      state: 'teststring'\n    })\n\n    res.redirect(authenticationUrl);\n  })\n\nmodule.exports = router;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1610746100835
  }
}