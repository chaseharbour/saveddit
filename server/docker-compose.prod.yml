version: "3.8"

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - SERVER_PORT=${SERVER_PORT}
        - CLIENT_PORT=${CLIENT_PORT}
        - SERVER_HOST_ADDRESS=${SERVER_HOST_ADDRESS}
        - CLIENT_HOST_ADDRESS=${CLIENT_HOST_ADDRESS}
        - CLIENT_ID=${CLIENT_ID}
        - CLIENT_SECRET=${CLIENT_SECRET}
        - SESS_SECRET=${SESS_SECRET}
    container_name: saveddit-server
    env_file:
      - .env
    ports:
      - "8081:${SERVER_PORT}"
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - app-network

  db:
    image: redis:latest
    container_name: redis-server
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 3
      start_period: 1s

  webserver:
    image: nginx:mainline-alpine
    container_name: webserver
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - web-root:/var/www/html
      - ./nginx-conf:/etc/nginx/conf.d
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    depends_on:
      - web
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
    depends_on:
      - webserver
    command: certonly --webroot --webroot-path=/var/www/html --email ${CONTACT_EMAIL} --agree-tos --no-eff-email --staging -d 165.232.156.48

volumes:
  certbot-etc:
  certbot-var:
  web-root:
    driver: local

networks:
  app-network:
    driver: bridge
