{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/chase/Documents/dev/scheddit/client/src/Components/Dashbaord.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\n\nconst Dashboard = () => {\n  _s();\n\n  const [userSavedPosts, setUSerSavedPosts] = useState([]);\n  const [nextPageQuery, setNextPageQuery] = useState(1);\n\n  const getSavedQuery = () => {\n    fetch(`http://localhost:8081/dashboard/${nextPageQuery}`, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    }).then(response => {\n      console.log(response);\n      if (response.status === 200) return response.json();\n      throw new Error(\"Failed to retrieve subreddits\");\n    }).then(responseJson => {\n      if (nextPageQuery !== 1) {\n        //Just creates more nested arrays of objects\n        setUSerSavedPosts(prevItems => [...prevItems, ...responseJson]);\n      } else {\n        setUSerSavedPosts(responseJson);\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  useEffect(() => {\n    getSavedQuery();\n  }, []);\n  useEffect(() => {\n    if (userSavedPosts.length > 1) {\n      setNextPageQuery(userSavedPosts.slice(userSavedPosts.length - 1)[0].postFullname);\n    }\n  }, [userSavedPosts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), userSavedPosts ? userSavedPosts.map(i => {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: i.imgMed\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this)\n        }, i.title, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No subreddits found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 18\n    }, this), userSavedPosts ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getSavedQuery,\n      children: \"Load More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 31\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"BX0MitvbmFfJno35FxYmSDO1Fds=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/chase/Documents/dev/scheddit/client/src/Components/Dashbaord.js"],"names":["React","useState","useEffect","Dashboard","userSavedPosts","setUSerSavedPosts","nextPageQuery","setNextPageQuery","getSavedQuery","fetch","method","credentials","headers","Accept","then","response","console","log","status","json","Error","responseJson","prevItems","catch","error","length","slice","postFullname","map","i","imgMed","title"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAEpB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCJ,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,CAAD,CAAlD;;AAEA,QAAMO,aAAa,GAAG,MAAM;AACxBC,IAAAA,KAAK,CAAE,mCAAkCH,aAAc,EAAlD,EAAqD;AACtDI,MAAAA,MAAM,EAAE,KAD8C;AAEtDC,MAAAA,WAAW,EAAE,SAFyC;AAGtDC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAEL,wBAAgB,kBAFX;AAGL,4CAAoC;AAH/B;AAH6C,KAArD,CAAL,CASCC,IATD,CASMC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,UAAIA,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B,OAAOH,QAAQ,CAACI,IAAT,EAAP;AAC7B,YAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACH,KAbD,EAcCN,IAdD,CAcMO,YAAY,IAAI;AAClB,UAAIf,aAAa,KAAK,CAAtB,EAAyB;AACrB;AACAD,QAAAA,iBAAiB,CAACiB,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAe,GAAGD,YAAlB,CAAd,CAAjB;AACH,OAHD,MAGO;AACHhB,QAAAA,iBAAiB,CAACgB,YAAD,CAAjB;AACH;AAEJ,KAtBD,EAuBCE,KAvBD,CAuBOC,KAAK,IAAI;AACZR,MAAAA,OAAO,CAACQ,KAAR,CAAcA,KAAd;AACH,KAzBD;AA0BH,GA3BD;;AA6BAtB,EAAAA,SAAS,CAAC,MAAM;AACXM,IAAAA,aAAa;AACjB,GAFQ,EAEN,EAFM,CAAT;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIE,cAAc,CAACqB,MAAf,GAAwB,CAA5B,EAA+B;AAC3BlB,MAAAA,gBAAgB,CAACH,cAAc,CAACsB,KAAf,CAAqBtB,cAAc,CAACqB,MAAf,GAAwB,CAA7C,EAAgD,CAAhD,EAAmDE,YAApD,CAAhB;AACH;AACJ,GAJQ,EAIN,CAACvB,cAAD,CAJM,CAAT;AAMA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKA,cAAc,GAAIA,cAAc,CAACwB,GAAf,CAAmBC,CAAC,IAAI;AACxC,0BACK;AAAA,+BACI;AAAA,iCACI;AAAK,YAAA,GAAG,EAAEA,CAAC,CAACC;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ,WAASD,CAAC,CAACE,KAAX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADL;AAOF,KARkB,CAAJ,gBAQV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVT,EAWK3B,cAAc,gBAAG;AAAQ,MAAA,OAAO,EAAEI,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,GAAwD,IAX3E;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CA3DD;;GAAML,S;;KAAAA,S;AA6DN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Dashboard = () => {\n\n    const [userSavedPosts, setUSerSavedPosts] = useState([]);\n    const [nextPageQuery, setNextPageQuery] = useState(1);\n\n    const getSavedQuery = () => {\n        fetch(`http://localhost:8081/dashboard/${nextPageQuery}`, {\n            method: \"GET\",\n            credentials: \"include\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-type\": \"application/json\",\n                \"Access-Control-Allow-Credentials\": true\n            }\n        })\n        .then(response => {\n            console.log(response);\n            if (response.status === 200) return response.json();\n            throw new Error(\"Failed to retrieve subreddits\");\n        })\n        .then(responseJson => {\n            if (nextPageQuery !== 1) {\n                //Just creates more nested arrays of objects\n                setUSerSavedPosts(prevItems => [...prevItems, ...responseJson]);\n            } else {\n                setUSerSavedPosts(responseJson);\n            }\n\n        })\n        .catch(error => {\n            console.error(error);\n        })\n    }\n\n    useEffect(() => {\n         getSavedQuery();\n    }, []);\n\n    useEffect(() => {\n        if (userSavedPosts.length > 1) {\n            setNextPageQuery(userSavedPosts.slice(userSavedPosts.length - 1)[0].postFullname)        \n        }      \n    }, [userSavedPosts]);\n\n    return (\n        <div>\n            <h1>Dashboard</h1>\n            {userSavedPosts ?  userSavedPosts.map(i => {\n               return (\n                    <ul>\n                        <li key={i.title}>\n                            <img src={i.imgMed}></img>\n                        </li>\n                    </ul>\n                )\n            }) : <p>No subreddits found.</p>}\n            {userSavedPosts ? <button onClick={getSavedQuery}>Load More</button> : null}\n        </div>\n    )\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}